   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 dList main

   3  dList : decl dList
   4        |

   5  $$2 :

   6  decl : type $$2 Lid ';'

   7  $$3 :

   8  $$4 :

   9  decl : DECSTRUCT $$3 id '{' $$4 dListStruct '}' ';'

  10  $$5 :

  11  $$6 :

  12  $$7 :

  13  $$8 :

  14  decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'

  15  $$9 :

  16  $$10 :

  17  $$11 :

  18  $$12 :

  19  decl : FUNC VOID $$9 id '(' $$10 lparam ')' '{' $$11 corpoF $$12 '}'

  20  Lid : Lid ',' id
  21      | id

  22  lparam : lparam ',' param
  23         | param
  24         |

  25  $$13 :

  26  param : type $$13 idP

  27  corpoF : corpoF listacmd
  28         | corpoF dListStruct
  29         |

  30  $$14 :

  31  dListStruct : dListStruct type $$14 LidL ';'

  32  $$15 :

  33  dListStruct : type $$15 LidL ';'

  34  LidL : LidL ',' idL
  35       | idL

  36  idL : IDENT

  37  idP : IDENT

  38  id : IDENT

  39  type : INT
  40       | DOUBLE
  41       | BOOL

  42  $$16 :

  43  main : VOID MAIN '(' ')' $$16 bloco

  44  bloco : '{' listacmd '}'

  45  listacmd : listacmd cmd
  46           |

  47  cmd : exp ';'
  48      | IF '(' exp ')' cmd

  49  exp : exp '+' exp
  50      | exp '*' exp
  51      | exp '>' exp
  52      | exp AND exp
  53      | NUM
  54      | '(' exp ')'
  55      | IDENT
  56      | exp '=' exp
  57      | exp '[' exp ']'

  58  $$17 :

  59  exp : STRUCT IDENT $$17 IDENT

  60  $$18 :

  61  exp : IDENT $$18 '.' IDENT

  62  $$19 :

  63  exp : IDENT '(' $$19 pexp ')'

  64  pexp : pexp ',' exp
  65       | exp

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . dList main  (2)
	dList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	DECSTRUCT  shift 6
	FUNC  shift 7
	VOID  reduce 4

	type  goto 8
	dList  goto 9
	decl  goto 10


state 3
	type : INT .  (39)

	.  reduce 39


state 4
	type : DOUBLE .  (40)

	.  reduce 40


state 5
	type : BOOL .  (41)

	.  reduce 41


state 6
	decl : DECSTRUCT . $$3 id '{' $$4 dListStruct '}' ';'  (9)
	$$3 : .  (7)

	.  reduce 7

	$$3  goto 11


state 7
	decl : FUNC . type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)
	decl : FUNC . VOID $$9 id '(' $$10 lparam ')' '{' $$11 corpoF $$12 '}'  (19)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	VOID  shift 12
	.  error

	type  goto 13


state 8
	decl : type . $$2 Lid ';'  (6)
	$$2 : .  (5)

	.  reduce 5

	$$2  goto 14


state 9
	prog : $$1 dList . main  (2)

	VOID  shift 15
	.  error

	main  goto 16


state 10
	dList : decl . dList  (3)
	dList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	DECSTRUCT  shift 6
	FUNC  shift 7
	VOID  reduce 4

	type  goto 8
	dList  goto 17
	decl  goto 10


state 11
	decl : DECSTRUCT $$3 . id '{' $$4 dListStruct '}' ';'  (9)

	IDENT  shift 18
	.  error

	id  goto 19


state 12
	decl : FUNC VOID . $$9 id '(' $$10 lparam ')' '{' $$11 corpoF $$12 '}'  (19)
	$$9 : .  (15)

	.  reduce 15

	$$9  goto 20


state 13
	decl : FUNC type . id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)

	IDENT  shift 18
	.  error

	id  goto 21


state 14
	decl : type $$2 . Lid ';'  (6)

	IDENT  shift 18
	.  error

	id  goto 22
	Lid  goto 23


state 15
	main : VOID . MAIN '(' ')' $$16 bloco  (43)

	MAIN  shift 24
	.  error


state 16
	prog : $$1 dList main .  (2)

	.  reduce 2


state 17
	dList : decl dList .  (3)

	.  reduce 3


state 18
	id : IDENT .  (38)

	.  reduce 38


state 19
	decl : DECSTRUCT $$3 id . '{' $$4 dListStruct '}' ';'  (9)

	'{'  shift 25
	.  error


state 20
	decl : FUNC VOID $$9 . id '(' $$10 lparam ')' '{' $$11 corpoF $$12 '}'  (19)

	IDENT  shift 18
	.  error

	id  goto 26


state 21
	decl : FUNC type id . '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)

	'('  shift 27
	.  error


state 22
	Lid : id .  (21)

	.  reduce 21


state 23
	decl : type $$2 Lid . ';'  (6)
	Lid : Lid . ',' id  (20)

	';'  shift 28
	','  shift 29
	.  error


state 24
	main : VOID MAIN . '(' ')' $$16 bloco  (43)

	'('  shift 30
	.  error


state 25
	decl : DECSTRUCT $$3 id '{' . $$4 dListStruct '}' ';'  (9)
	$$4 : .  (8)

	.  reduce 8

	$$4  goto 31


state 26
	decl : FUNC VOID $$9 id . '(' $$10 lparam ')' '{' $$11 corpoF $$12 '}'  (19)

	'('  shift 32
	.  error


state 27
	decl : FUNC type id '(' . $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)
	$$5 : .  (10)

	.  reduce 10

	$$5  goto 33


state 28
	decl : type $$2 Lid ';' .  (6)

	.  reduce 6


state 29
	Lid : Lid ',' . id  (20)

	IDENT  shift 18
	.  error

	id  goto 34


state 30
	main : VOID MAIN '(' . ')' $$16 bloco  (43)

	')'  shift 35
	.  error


state 31
	decl : DECSTRUCT $$3 id '{' $$4 . dListStruct '}' ';'  (9)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	.  error

	type  goto 36
	dListStruct  goto 37


state 32
	decl : FUNC VOID $$9 id '(' . $$10 lparam ')' '{' $$11 corpoF $$12 '}'  (19)
	$$10 : .  (16)

	.  reduce 16

	$$10  goto 38


state 33
	decl : FUNC type id '(' $$5 . lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)
	lparam : .  (24)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	')'  reduce 24
	','  reduce 24

	type  goto 39
	lparam  goto 40
	param  goto 41


state 34
	Lid : Lid ',' id .  (20)

	.  reduce 20


state 35
	main : VOID MAIN '(' ')' . $$16 bloco  (43)
	$$16 : .  (42)

	.  reduce 42

	$$16  goto 42


state 36
	dListStruct : type . $$15 LidL ';'  (33)
	$$15 : .  (32)

	.  reduce 32

	$$15  goto 43


state 37
	decl : DECSTRUCT $$3 id '{' $$4 dListStruct . '}' ';'  (9)
	dListStruct : dListStruct . type $$14 LidL ';'  (31)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	'}'  shift 44
	.  error

	type  goto 45


state 38
	decl : FUNC VOID $$9 id '(' $$10 . lparam ')' '{' $$11 corpoF $$12 '}'  (19)
	lparam : .  (24)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	')'  reduce 24
	','  reduce 24

	type  goto 39
	lparam  goto 46
	param  goto 41


state 39
	param : type . $$13 idP  (26)
	$$13 : .  (25)

	.  reduce 25

	$$13  goto 47


state 40
	decl : FUNC type id '(' $$5 lparam . ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)
	lparam : lparam . ',' param  (22)

	')'  shift 48
	','  shift 49
	.  error


state 41
	lparam : param .  (23)

	.  reduce 23


state 42
	main : VOID MAIN '(' ')' $$16 . bloco  (43)

	'{'  shift 50
	.  error

	bloco  goto 51


state 43
	dListStruct : type $$15 . LidL ';'  (33)

	IDENT  shift 52
	.  error

	LidL  goto 53
	idL  goto 54


state 44
	decl : DECSTRUCT $$3 id '{' $$4 dListStruct '}' . ';'  (9)

	';'  shift 55
	.  error


state 45
	dListStruct : dListStruct type . $$14 LidL ';'  (31)
	$$14 : .  (30)

	.  reduce 30

	$$14  goto 56


state 46
	decl : FUNC VOID $$9 id '(' $$10 lparam . ')' '{' $$11 corpoF $$12 '}'  (19)
	lparam : lparam . ',' param  (22)

	')'  shift 57
	','  shift 49
	.  error


state 47
	param : type $$13 . idP  (26)

	IDENT  shift 58
	.  error

	idP  goto 59


state 48
	decl : FUNC type id '(' $$5 lparam ')' . '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)

	'{'  shift 60
	.  error


state 49
	lparam : lparam ',' . param  (22)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	.  error

	type  goto 39
	param  goto 61


state 50
	bloco : '{' . listacmd '}'  (44)
	listacmd : .  (46)

	.  reduce 46

	listacmd  goto 62


state 51
	main : VOID MAIN '(' ')' $$16 bloco .  (43)

	.  reduce 43


state 52
	idL : IDENT .  (36)

	.  reduce 36


state 53
	dListStruct : type $$15 LidL . ';'  (33)
	LidL : LidL . ',' idL  (34)

	';'  shift 63
	','  shift 64
	.  error


state 54
	LidL : idL .  (35)

	.  reduce 35


state 55
	decl : DECSTRUCT $$3 id '{' $$4 dListStruct '}' ';' .  (9)

	.  reduce 9


state 56
	dListStruct : dListStruct type $$14 . LidL ';'  (31)

	IDENT  shift 52
	.  error

	LidL  goto 65
	idL  goto 54


state 57
	decl : FUNC VOID $$9 id '(' $$10 lparam ')' . '{' $$11 corpoF $$12 '}'  (19)

	'{'  shift 66
	.  error


state 58
	idP : IDENT .  (37)

	.  reduce 37


state 59
	param : type $$13 idP .  (26)

	.  reduce 26


state 60
	decl : FUNC type id '(' $$5 lparam ')' '{' . $$6 corpoF RETURN exp $$7 ';' $$8 '}'  (14)
	$$6 : .  (11)

	.  reduce 11

	$$6  goto 67


state 61
	lparam : lparam ',' param .  (22)

	.  reduce 22


state 62
	bloco : '{' listacmd . '}'  (44)
	listacmd : listacmd . cmd  (45)

	IDENT  shift 68
	NUM  shift 69
	IF  shift 70
	STRUCT  shift 71
	'}'  shift 72
	'('  shift 73
	.  error

	exp  goto 74
	cmd  goto 75


state 63
	dListStruct : type $$15 LidL ';' .  (33)

	.  reduce 33


state 64
	LidL : LidL ',' . idL  (34)

	IDENT  shift 52
	.  error

	idL  goto 76


state 65
	dListStruct : dListStruct type $$14 LidL . ';'  (31)
	LidL : LidL . ',' idL  (34)

	';'  shift 77
	','  shift 64
	.  error


state 66
	decl : FUNC VOID $$9 id '(' $$10 lparam ')' '{' . $$11 corpoF $$12 '}'  (19)
	$$11 : .  (17)

	.  reduce 17

	$$11  goto 78


state 67
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 . corpoF RETURN exp $$7 ';' $$8 '}'  (14)
	corpoF : .  (29)

	.  reduce 29

	corpoF  goto 79


state 68
	exp : IDENT .  (55)
	exp : IDENT . $$18 '.' IDENT  (61)
	exp : IDENT . '(' $$19 pexp ')'  (63)
	$$18 : .  (60)

	'('  shift 80
	AND  reduce 55
	'='  reduce 55
	'>'  reduce 55
	'+'  reduce 55
	'['  reduce 55
	';'  reduce 55
	')'  reduce 55
	','  reduce 55
	'*'  reduce 55
	']'  reduce 55
	'.'  reduce 60

	$$18  goto 81


state 69
	exp : NUM .  (53)

	.  reduce 53


state 70
	cmd : IF . '(' exp ')' cmd  (48)

	'('  shift 82
	.  error


state 71
	exp : STRUCT . IDENT $$17 IDENT  (59)

	IDENT  shift 83
	.  error


state 72
	bloco : '{' listacmd '}' .  (44)

	.  reduce 44


state 73
	exp : '(' . exp ')'  (54)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 84


state 74
	cmd : exp . ';'  (47)
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	';'  shift 90
	'*'  shift 91
	.  error


state 75
	listacmd : listacmd cmd .  (45)

	.  reduce 45


state 76
	LidL : LidL ',' idL .  (34)

	.  reduce 34


state 77
	dListStruct : dListStruct type $$14 LidL ';' .  (31)

	.  reduce 31


state 78
	decl : FUNC VOID $$9 id '(' $$10 lparam ')' '{' $$11 . corpoF $$12 '}'  (19)
	corpoF : .  (29)

	.  reduce 29

	corpoF  goto 92


79: shift/reduce conflict (shift 3, reduce 46) on INT
79: shift/reduce conflict (shift 4, reduce 46) on DOUBLE
79: shift/reduce conflict (shift 5, reduce 46) on BOOL
79: shift/reduce conflict (shift 93, reduce 46) on RETURN
state 79
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF . RETURN exp $$7 ';' $$8 '}'  (14)
	corpoF : corpoF . listacmd  (27)
	corpoF : corpoF . dListStruct  (28)
	listacmd : .  (46)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	RETURN  shift 93
	IDENT  reduce 46
	NUM  reduce 46
	IF  reduce 46
	STRUCT  reduce 46
	'('  reduce 46

	type  goto 36
	dListStruct  goto 94
	listacmd  goto 95


state 80
	exp : IDENT '(' . $$19 pexp ')'  (63)
	$$19 : .  (62)

	.  reduce 62

	$$19  goto 96


state 81
	exp : IDENT $$18 . '.' IDENT  (61)

	'.'  shift 97
	.  error


state 82
	cmd : IF '(' . exp ')' cmd  (48)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 98


state 83
	exp : STRUCT IDENT . $$17 IDENT  (59)
	$$17 : .  (58)

	.  reduce 58

	$$17  goto 99


state 84
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : '(' exp . ')'  (54)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	')'  shift 100
	'*'  shift 91
	.  error


state 85
	exp : exp AND . exp  (52)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 101


state 86
	exp : exp '=' . exp  (56)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 102


state 87
	exp : exp '>' . exp  (51)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 103


state 88
	exp : exp '+' . exp  (49)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 104


state 89
	exp : exp '[' . exp ']'  (57)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 105


state 90
	cmd : exp ';' .  (47)

	.  reduce 47


state 91
	exp : exp '*' . exp  (50)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 106


92: shift/reduce conflict (shift 3, reduce 46) on INT
92: shift/reduce conflict (shift 4, reduce 46) on DOUBLE
92: shift/reduce conflict (shift 5, reduce 46) on BOOL
92: reduce/reduce conflict (reduce 18, reduce 46) on '}'
state 92
	decl : FUNC VOID $$9 id '(' $$10 lparam ')' '{' $$11 corpoF . $$12 '}'  (19)
	corpoF : corpoF . listacmd  (27)
	corpoF : corpoF . dListStruct  (28)
	$$12 : .  (18)
	listacmd : .  (46)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	IDENT  reduce 46
	NUM  reduce 46
	IF  reduce 46
	STRUCT  reduce 46
	'}'  reduce 18
	'('  reduce 46

	type  goto 36
	dListStruct  goto 94
	$$12  goto 107
	listacmd  goto 95


state 93
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN . exp $$7 ';' $$8 '}'  (14)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 108


94: shift/reduce conflict (shift 3, reduce 28) on INT
94: shift/reduce conflict (shift 4, reduce 28) on DOUBLE
94: shift/reduce conflict (shift 5, reduce 28) on BOOL
state 94
	corpoF : corpoF dListStruct .  (28)
	dListStruct : dListStruct . type $$14 LidL ';'  (31)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	IDENT  reduce 28
	NUM  reduce 28
	IF  reduce 28
	STRUCT  reduce 28
	RETURN  reduce 28
	'}'  reduce 28
	'('  reduce 28

	type  goto 45


95: shift/reduce conflict (shift 68, reduce 27) on IDENT
95: shift/reduce conflict (shift 69, reduce 27) on NUM
95: shift/reduce conflict (shift 70, reduce 27) on IF
95: shift/reduce conflict (shift 71, reduce 27) on STRUCT
95: shift/reduce conflict (shift 73, reduce 27) on '('
state 95
	corpoF : corpoF listacmd .  (27)
	listacmd : listacmd . cmd  (45)

	IDENT  shift 68
	NUM  shift 69
	IF  shift 70
	STRUCT  shift 71
	'('  shift 73
	INT  reduce 27
	DOUBLE  reduce 27
	BOOL  reduce 27
	RETURN  reduce 27
	'}'  reduce 27

	exp  goto 74
	cmd  goto 75


state 96
	exp : IDENT '(' $$19 . pexp ')'  (63)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 109
	pexp  goto 110


state 97
	exp : IDENT $$18 '.' . IDENT  (61)

	IDENT  shift 111
	.  error


state 98
	cmd : IF '(' exp . ')' cmd  (48)
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	')'  shift 112
	'*'  shift 91
	.  error


state 99
	exp : STRUCT IDENT $$17 . IDENT  (59)

	IDENT  shift 113
	.  error


state 100
	exp : '(' exp ')' .  (54)

	.  reduce 54


101: shift/reduce conflict (shift 91, reduce 52) on '*'
state 101
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp AND exp .  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)

	'['  shift 89
	'*'  shift 91
	AND  reduce 52
	'='  reduce 52
	'>'  reduce 52
	'+'  reduce 52
	';'  reduce 52
	')'  reduce 52
	','  reduce 52
	']'  reduce 52


102: shift/reduce conflict (shift 91, reduce 56) on '*'
state 102
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp '=' exp .  (56)
	exp : exp . '[' exp ']'  (57)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	'*'  shift 91
	';'  reduce 56
	')'  reduce 56
	','  reduce 56
	']'  reduce 56


103: shift/reduce conflict (shift 91, reduce 51) on '*'
state 103
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp '>' exp .  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)

	AND  shift 85
	'+'  shift 88
	'['  shift 89
	'*'  shift 91
	'='  reduce 51
	';'  reduce 51
	')'  reduce 51
	','  reduce 51
	']'  reduce 51


104: shift/reduce conflict (shift 91, reduce 49) on '*'
state 104
	exp : exp . '+' exp  (49)
	exp : exp '+' exp .  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)

	AND  shift 85
	'['  shift 89
	'*'  shift 91
	'='  reduce 49
	'>'  reduce 49
	'+'  reduce 49
	';'  reduce 49
	')'  reduce 49
	','  reduce 49
	']'  reduce 49


state 105
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)
	exp : exp '[' exp . ']'  (57)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	'*'  shift 91
	']'  shift 114
	.  error


106: shift/reduce conflict (shift 85, reduce 50) on AND
106: shift/reduce conflict (shift 86, reduce 50) on '='
106: shift/reduce conflict (shift 87, reduce 50) on '>'
106: shift/reduce conflict (shift 88, reduce 50) on '+'
106: shift/reduce conflict (shift 89, reduce 50) on '['
106: shift/reduce conflict (shift 91, reduce 50) on '*'
state 106
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp '*' exp .  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	'*'  shift 91
	';'  reduce 50
	')'  reduce 50
	','  reduce 50
	']'  reduce 50


state 107
	decl : FUNC VOID $$9 id '(' $$10 lparam ')' '{' $$11 corpoF $$12 . '}'  (19)

	'}'  shift 115
	.  error


state 108
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp . $$7 ';' $$8 '}'  (14)
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)
	$$7 : .  (12)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	'*'  shift 91
	';'  reduce 12

	$$7  goto 116


state 109
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)
	pexp : exp .  (65)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	'*'  shift 91
	')'  reduce 65
	','  reduce 65


state 110
	exp : IDENT '(' $$19 pexp . ')'  (63)
	pexp : pexp . ',' exp  (64)

	')'  shift 117
	','  shift 118
	.  error


state 111
	exp : IDENT $$18 '.' IDENT .  (61)

	.  reduce 61


state 112
	cmd : IF '(' exp ')' . cmd  (48)

	IDENT  shift 68
	NUM  shift 69
	IF  shift 70
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 74
	cmd  goto 119


state 113
	exp : STRUCT IDENT $$17 IDENT .  (59)

	.  reduce 59


state 114
	exp : exp '[' exp ']' .  (57)

	.  reduce 57


state 115
	decl : FUNC VOID $$9 id '(' $$10 lparam ')' '{' $$11 corpoF $$12 '}' .  (19)

	.  reduce 19


state 116
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 . ';' $$8 '}'  (14)

	';'  shift 120
	.  error


state 117
	exp : IDENT '(' $$19 pexp ')' .  (63)

	.  reduce 63


state 118
	pexp : pexp ',' . exp  (64)

	IDENT  shift 68
	NUM  shift 69
	STRUCT  shift 71
	'('  shift 73
	.  error

	exp  goto 121


state 119
	cmd : IF '(' exp ')' cmd .  (48)

	.  reduce 48


state 120
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' . $$8 '}'  (14)
	$$8 : .  (13)

	.  reduce 13

	$$8  goto 122


state 121
	exp : exp . '+' exp  (49)
	exp : exp . '*' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (56)
	exp : exp . '[' exp ']'  (57)
	pexp : pexp ',' exp .  (64)

	AND  shift 85
	'='  shift 86
	'>'  shift 87
	'+'  shift 88
	'['  shift 89
	'*'  shift 91
	')'  reduce 64
	','  reduce 64


state 122
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 . '}'  (14)

	'}'  shift 123
	.  error


state 123
	decl : FUNC type id '(' $$5 lparam ')' '{' $$6 corpoF RETURN exp $$7 ';' $$8 '}' .  (14)

	.  reduce 14


State 79 contains 4 shift/reduce conflicts.
State 92 contains 3 shift/reduce conflicts, 1 reduce/reduce conflict.
State 94 contains 3 shift/reduce conflicts.
State 95 contains 5 shift/reduce conflicts.
State 101 contains 1 shift/reduce conflict.
State 102 contains 1 shift/reduce conflict.
State 103 contains 1 shift/reduce conflict.
State 104 contains 1 shift/reduce conflict.
State 106 contains 6 shift/reduce conflicts.


30 terminals, 39 nonterminals
66 grammar rules, 124 states
